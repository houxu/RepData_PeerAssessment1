data1 <- read.csv("data1.csv", skip = 6)
head(data1)
data1 <- read.csv("data1.csv", skip = 10)
head(data1)
data1 <- read.csv("data1.csv", skip = 10, header = F)
head(data1)
View(data1)
data1 <- read.csv("data1.csv", skip = 10, header = F)
View(data1)
data1 <- read.csv("data1.csv)
data1 <- read.csv("data1.csv")
data1 <- read.csv("data1.csv")
View(data1)
data1 <- read.csv("data1.csv")
View(data1)
data1 <- read.csv("data1.csv", blank.lines.skip = TRUE)
View(data1)
data1 <- read.csv("data1.csv", blank.lines.skip = TRUE, skip = 10, header = FALSE)
View(data1)
data1 <- read.csv("data1.csv", skip = 10, header = FALSE)
head(data1)
data1 <- read.csv("data1.csv", skip = 10, header = FALSE)
View(data1)
data1 <- read.csv("data1.csv", skip = 10, header = FALSE)
View(data1)
str(data1)
as.numeric(data1$V4)
View(data1)
str(data1)
data1$V4 <- as.numeric(data1$V4)
str(data1)
View(data1)
data1 <- read.csv("data1.csv", skip = 10, header = FALSE)
View(data1)
data1$V4 <- as.numeric(data1$V4)
View(data1)
data <- read.csv("data1.csv", skip = 10, header = FALSE)
View(data1)
View(data)
as.numeric(..)
as.numeric("..")
as.numeric("1,343")
data <- read.csv("data1.csv", skip = 10, header = FALSE)
View(data)
data <- read.csv("data1.csv", header = FALSE)
View(data)
data <- read.csv("data1.csv", header = FALSE)
View(data)
data <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE)
View(data)
data <- read.table("data1.csv", sep = ",", header = FALSE, strip.white = T, blank.lines.skip = TRUE)
data <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE)
data <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE)
View(data)
as.numeric(data$V3)
as.numeric(c("..", "343"))
data$V3
data$V3 <- as.numeric(data$V3)
View(data)
data <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE)
View(data)
data1$V3 <- as.numeric(data$V3)
str(data)
data <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE, stringsAsFactors = F)
View(data)
as.numeric(data$V3)
data1 <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE, stringsAsFactors = F)
data1$V3 <- as.numeric(data$V3)
View(data1)
View(data)
View(data)
View(data1)
data2 <- read.csv("data2.csv", header = FALSE, strip.white = T, blank.lines.skip = T, stringAsFactors = F)
data2 <- read.csv("data2.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE, stringsAsFactors = F)
View(data2)
data2 <- read.csv("data2.csv", strip.white = T, blank.lines.skip = TRUE, stringsAsFactors = F)
View(data2)
View(data1)
View(data2)
intersect(data1$V1, data2$CountryCode)
length(intersect(data1$V1, data2$CountryCode))
length(data1$V1)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="data1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile="data1.csv")
data1 <- read.csv("data1.csv", header = FALSE, strip.white = T, blank.lines.skip = TRUE, stringsAsFactors = F)
View(data1)
as.numeric(data1V2)
as.numeric(data1$V2)
unique(data1)
unique(data1$V1)
length(intersect(unique(data1$V1), unique(data2$CountryCode)))
data1[order(data1$V2), ]$V4[13]
data1[order(data1$V2), ]
tmp <- data1[order(data1$V2), ]
View(tmp)
tmp <- data1[order(as.numeric(data1$V2)), ]
tmp <- data1[order(data1$V2), ]
View(tmp)
as.numeric(data1$V2)
data1$V2
View(data1)
x <- 1:5
x[4] <- NA
order(x)
tmp <- data1[order(data1$V2), ]
View(tmp)
as.numeric(data1$V2)
order(as.numeric(data1$V2))
data1[order(as.numeric(data1$V2)), ]
tmp <- data1[order(as.numeric(data1$V2)), ]
View(tmp)
merge(data1, data2, by.x=data1$V1, by.y=data2$CountryCode)
merge(data1, data2, by.x=data1$V1, by.y=data2$CountryCode, all = T)
merge(data1, data2, by.x="V1", by.y="CountryCode", all = T)
tmp <- merge(data1, data2, by.x="V1", by.y="CountryCode", all = T)
tapply[tmp$V2, tmp$Income.Group, average)
tapply(tmp$V2, tmp$Income.Group, average)
?ave
ave(1:2)
average(1:3)
tapply(tmp$V2, tmp$Income.Group, mean)
str(tmp)
View(tmp)
class(tmp$V1)
class(tmp$V2)
as.numeric(tmp$V2)
tmp$V2 <- as.numeric(tmp$V2)
tapply(tmp$V2, tmp$Income.Group, mean)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="data1.csv")
x <- "dfd adfd"
strsplit(x)
strsplit(x="df ad", split=" ")
?strsplit
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
# split x on the letter e
strsplit(x, "e")
?intersect
data <- read.csv("data1.csv")
View(data)
tmpList <- strsplit(x=names(data),split= "wgtp")
tmpList[123]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
data <- read.csv("data1.csv")
data <- read.csv("data1.csv", stringAsFactors = F)
data <- read.csv("data1.csv", stringsAsFactors = F)
View(data)
?sub
gsub(",", "", data$X.3)
as.numeric(gsub(",", "", data$X.3))
mean(as.numeric(gsub(",", "", data$X.3)), na.rm = T)
data$X.3 <- as.numeric(gsub(",", "", data$X.3)), na.rm = T
data$X.3 <- as.numeric(gsub(",", "", data$X.3)), na.rm = T)
data$X.3 <- as.numeric(gsub(",", "", data$X.3)), na.rm = T))
data$X.3 <- as.numeric(gsub(",", "", data$X.3))
mean(data[5:194, ]$X.3)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
data1 <- read.csv("data1.csv")
head(data1\)
head(data1)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="data1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv  ", destfile="data2.csv")
data1 <- read.csv("data1.csv")
data2 <- read.csv("data2.")
data2 <- read.csv("data2.csv")
data1 <- read.csv("data1.csv", stringsAsFactors = F)
data2 <- read.csv("data2.csv", stringsAsFactors = F)
View(data1)
View(data2)
data1 <- data1[5:194, ]
View(data1)
tmp <- merge(data1, data2, by.x="X", by.y="CountryCode", all = T)
tmp
patt <- ".*Fiscal year end.*June.*"
xx <- "Fiscal year end: June 30; reporting period for national accounts data: FY."
grep(patt, xx)
xx <- "Fiscal year end: June 30; reporting period for national accounts data: FY.Fiscal year end: June 30; rep"
grep(patt, xx)
y <- "Dfdf"
grep(patt, y)
grep(patt, xx, value = TRUE)
grepl(patt, xx)
loggg <- grepl(patt, tmp$Special.Notes)
loggg
sum(loggg)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
str(amzn)
xts
?xts
amzn$row.names
str(amzn)
amzn.xts
amzn.xts['2007']
data.frame(amzn)
data <- data.frame(amzn)
str(data)
data
head(data)
data.frame(amzn,stringsAsFactors=F)
data <- data.frame(amzn,stringsAsFactors=F)
str(data)
amzn
head(amzn)
amzn['2007-01-03']
as.Date(amzn)
amzn['2007']
nrow(amzn['2012'])
sampleTimes
as.Date(sampleTimes)
?as.Date
as.Date(sampleTimes, "%Y-%b-%d")
xx <- as.Date(sampleTimes, "%Y-%b-%d")
xx[xx > as.Date("2012") & xx < as.Date("2013")]
xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")]
length(xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")])
weekdays(xx)
yy <- xx[xx > as.Date("2012-01-01") & xx < as.Date("2013-01-01")]
yy[yy == "星期一"]
yy[1]
yy[weekdays(yy) == "星期一"]
length(yy[weekdays(yy) == "星期一"])
?append
append(1:5, 0:1, after = 3)
library(lattice)
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality)
library(ggplot2)
str(mpg)
ls
ls()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color =drv)
qplot(displ, hwy, data = mpg, color =drv, geom = c("point"))
qplot(displ, hwy, data = mpg, color =drv, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, color =drv, geom = c("smooth"))
qplot(displ, data = mpg)
qplot(displ, data = mpg, color = drv)
qplot(displ, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = drv ~ .)
qplot(hwy,data = mpg, facets = drv ~ .)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 44)
qplot(hwy,data = mpg, facets = drv ~ ., binwidth = 2)
dir()
rm "Thumb.db"
remove
rm ("Thumb.db")
remove ("Thumb.db")
?ggplot
x <- 1:100
x
seq(0,1, length = 4)
cutpoints <- quantile(x)
cutpoints
xx <- cut(x, cutpoints)
xx
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?print.trellis()
?splom()
?trellis.par.set()
str(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?hcluster
?hclust
hc <- hclust(dist(USArrests), "ave")
plot(hc)
hc <- hclust(dist(USArrests))
plot(hc)
heatmap
?heatmap
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
?heapmap
?heatmap
heatmap(dataFrame)
dataFrame
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x = x, y = y)
heatmap(dataFrame)
sample(1:12)
sample(1:12)
heatmap(as.matrix(dataFrame))
View(ames)
write.table(ames, "houxianxutmp.csv")
dir()
libary(knitr)
library(knitr)
install.packages("knitr")
library(knitr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
?rmarkdown
render("input.Rmd", html_document())
render("input.Rmd", html_document())
library(rmarkdown)
render("input.Rmd", html_document())
render("input.Rmd", pdf_document(toc = TRUE, "--listings"))
preview
??preview
Previes
Preview
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
source('~/.active-rstudio-document', echo=TRUE)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab")
install.packages("kernlab", type="source")
install.packages("kernlab", type="source")
library(kernlab)
library(kernlab)
install.packages(kernlab)
install.packages("kernlab")
install.packages("kernlab")
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.1-4.tar.gz", repos = NULL, type = "source")
libary(kernlab)
library(kernlab)
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.1-4.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Houxianxu/Desktop/kernlab_0.9-18.tar.gz", repos = NULL, type = "source")
library(kernlab)
spam
data(spam)
spam
?data
data
()
data
()
data()
ticdata
data(ticdata)
set.seed(232)
set.seed(511)
dim(spam)
trainIndicator <- rbinom(4601, size - 1, prob = 0.5)
trainIndicator <- rbinom(4601, size = 1, prob = 0.5)
trainIndicator
?rbinom
trainIndicator <- rbinom(4601, size = 2, prob = 0.5)
trainIndicator
sample(1:100,50)
?sample
sample.int(1:100,50)
str(spam)
head(spam)
trainIndicator
spam[trainIndicator == 1, ]
View(spam)
library(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(spam, aes(type, capitalAve))  + geom_boxplot()
spam$type
as.numeric(spam$type)
?reformulate
cor(spam$charDollar, spam$type)
cor(spam$charDollar, as.numeric(spam$type))
cor(spam$charExclamation, as.numeric(spam$type))
?join
library(plyr)
?join
average_week <- ddply(data_no_NA, .(day_type, interval), summarize, steps=mean(steps))
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y-%m-%d")
unzip("repdata-data-activity.zip")
setwd("E:/study/ComputerPrograms/courseCode/dataScienceCoursera/Reproducible_Research/Assessment_1")
dir()
unzip("repdata-data-activity.zip")
data <- read.csv("activity.csv", stringsAsFactors = F)
data$date <- as.Date(data$date, "%Y-%m-%d")
library(plyr)
library(ggplot2)
data_no_NA <- data[!is.na(data$steps), ]
date_steps <- ddply(data_no_NA, .(date), summarise, steps=sum(steps))
g<- ggplot(date_steps, aes(date, steps)) + geom_bar(stat = "identity")
plot(g)
mean(date_steps$steps)
# median of steps
median(date_steps$steps)
average_date <- ddply(data_no_NA, .(interval), summarize, steps=mean(steps))
g <- ggplot(average_date, aes(interval, steps)) + geom_line()
plot(g)
average_date[average_date$steps == max(average_date$steps), ]
names(average_date)[2] <- "ave_steps"
sum(!complete.cases(data))
merged_data <- join(data, average_date)
na_index <- !complete.cases(merged_data)
merged_data$steps[na_index] <- merged_data$ave_steps[na_index]
# plot the histogram
new_date_steps <- ddply(merged_data, .(date), summarize, steps=sum(steps))
g <- ggplot(new_date_steps, aes(date, steps)) + geom_bar(stat = "identity")
plot(g)
# mean of steps
mean(new_date_steps$steps)
# median of steps
median(new_date_steps$steps)
day_type <- function(date) {
if (weekdays(date) %in% c("星期六", "星期日")) {
return ("weekend")
} else {
return ("weekday")
}
}
data_no_NA$day_type <- as.factor(sapply(data_no_NA$date, day_type))
head(data_no_NA)
average_week <- ddply(data_no_NA, .(day_type, interval), summarize, steps=mean(steps))
head(average_week)
g <- ggplot(average_week, aes(interval, steps))
g <- g + geom_line()
g <- g + facet_grid(. ~ data_type)
plot(g)
g <- ggplot(average_week, aes(interval, steps))
g <- g + geom_line()
g
g <- g + facet_grid(day_type ~ .)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
dir()
?knit2html("PA1_template.Rmd")
dir()
knit2html("PA1_template.Rmd")
dir()
